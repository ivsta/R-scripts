str(processed_features)
fac_features <- data.table(char_features, other_facs)
fac_features_conv <- mclapply(fac_features, as.factor, mc.cores = 4)
fac_features_conv_dt <- as.data.table(fac_features_conv)
num_levels <- sapply(fac_features_conv_dt, nlevels)
low_levels <- num_levels[num_levels <= 52]
fac_features_filtered <- fac_features_conv_dt[, rownames(data.frame(low_levels)), with = FALSE]
fac_features <- fac_features_filtered
str(fac_features)
# Impute missing categorical values with 'MISSING'
fac_features.mat <- as.matrix(fac_features)
fac_features.mat[is.na(fac_features.mat)] <- 'MISSING'
fac_features.mat[fac_features.mat == ''] <- 'MISSING'
fac_features.dt <- data.table(fac_features.mat)
str(fac_features)
fac_features.mat <- as.matrix(fac_features)
fac_features.mat[is.na(fac_features.mat)] <- 'MISSING'
fac_features.mat[fac_features.mat == ''] <- 'MISSING'
fac_features.dt <- data.table(fac_features.mat)
str(fac_features.dt)
fac_features.dt <- mclapply(fac_features.dt, as.factor, mc.cores = 4)
str(fac_features.dt)
nums <- sapply(features_model, is.numeric)
num_features <- data.frame(features_model)[,nums]
str(num_features, list.len = 999)
num_features <- data.table(num_features)
num_features <- num_features[, list(MEMBERSHIP_TENURE
, ADDITIONAL_YEARS
, TIME_SINCE_CURRENT_STATUS
, TIME_SINCE_YOUTH_EXPR
, AGE
, LATITUDE
, LONGITUDE
, NUM_PRODUCTS
, AVG_CONTRACT_PERIOD
, TIME_SINCE_STATUS_CHG
, TIME_SINCE_CONTRACT_START
, TIME_SINCE_CONTRACT_END
, TIME_SINCE_DATE_PAID_TO
, NUM_VEHICLE_BOLT_ON
, NUM_VEHICLE_CAR
, NUM_VEHICLE_MOTORCYCLE
, NUM_VEHICLE_NO_CAR
#                                     , NUM_VEHICLE_SCOOTER
, NUM_VEHICLE_TAXI
, NUM_REGR_STATE_ACT
, NUM_REGR_STATE_NSW
, NUM_REGR_STATE_NT
, NUM_REGR_STATE_QLD
, NUM_REGR_STATE_SA
, NUM_REGR_STATE_TAS
, NUM_REGR_STATE_VIC
, NUM_REGR_STATE_WA
, CAR_YEAR
, NumCADJobs
, CAD_JOBS_vs_tenure_ratio
, NumProducts_vs_tenure_ratio)]
num_features
for (j in 1:ncol(num_features)) set(num_features, which(is.infinite(num_features[[j]])), j, NA)
preProcValues <- preProcess(num_features, method = c("center", "scale"), verbose = TRUE)
num_features <- predict(preProcValues, num_features)
num_features[is.na(num_features)] <- 0
processed_features <- data.table(ids, fac_features.dt, num_features)
str(ids)
str(fac_features.dt)
str(num_features)
fac_features.dt
fac_features.dt <- as.data.table(fac_features.dt)
processed_features <- data.table(ids, fac_features.dt, num_features)
str(processed_features)
processed_features <- data.table(fac_features.dt, num_features)
str(processed_features)
processed_data[, `:=` ( MKTG_CONSENT_FLAG = NULL
, ANY_CAD_CAR_MAKE = NULL
, ANY_CAD_CAR_MODEL = NULL
, ANY_CAD_CAR_MAKE_MODEL = NULL
, CURRENT_STATUS = NULL
)]
processed_features[, `:=` ( MKTG_CONSENT_FLAG = NULL
, ANY_CAD_CAR_MAKE = NULL
, ANY_CAD_CAR_MODEL = NULL
, ANY_CAD_CAR_MAKE_MODEL = NULL
, CURRENT_STATUS = NULL
)]
processed_features[, label]
processed_features[BREAKDOWN_DESCRIPTION == 'BATTERY SOLD', label := as.factor(1)]
str(processed_features)
library(caret)
library(data.table)
library(pROC)
library(randomForest)
library(parallel)
colClasses <- sapply(read.csv('/Users/wilsonpok/Desktop/features.csv', nrows = 100), class)
features_model <- fread('/Users/wilsonpok/Desktop/features.csv', verbose = TRUE, colClasses = colClasses)
str(features_model, list.len = 999)
features_model[BREAKDOWN_DESCRIPTION == 'BATTERY SOLD', label := as.factor(1)]
features_model[BREAKDOWN_DESCRIPTION != 'BATTERY SOLD', label := as.factor(0)]
features_model[, list(NumMembers = .N), by = label]
# ids <- features_model[, list(MEMBERSHIP_ID = as.character(MEMBERSHIP_ID))]
chars <- sapply(features_model, is.character)
char_features <- data.frame(features_model)[, chars]
char_features <- data.table(char_features)
other_facs <- features_model[, list(label
, CURRENT_STATUS
, MEMBER_TYPE_CODE
, MEMBERSHIP_CATEGORY_CODE
, LOYALTY_BENEFIT_FLAG
, LOCATION_ID
, EMPLOYEE_FLAG
, DECEASED_FLAG
, RETURNED_MAIL_FLAG
, DRIVERS_LICENCE_NUMBER
, ABN
, ACN
, ORGANISATION_NAME
, FIRST_NAME
, INITIALS
, LAST_NAME
, PROPERTY_NAME
, STREET_NUMBER
, STREET_NAME
, ADDITIONAL_ADDRESS_DETAIL
, POST
, POST_EDIT
, HOME_AREA_CODE
, HOME_PHONE
, WORK_AREA_CODE
, WORK_PHONE
, MOBILE_AREA_CODE
, MOBILE_PHONE
, DPID
, CCD
, MESHBLOCK
, SLA
, PRODUCT_ID_FLAG_1
, PRODUCT_ID_FLAG_2
, PRODUCT_ID_FLAG_3
, PRODUCT_ID_FLAG_4
#                                    , PRODUCT_ID_FLAG_5
, PRODUCT_ID_FLAG_11
, PRODUCT_ID_FLAG_12
#                                    , PRODUCT_ID_FLAG_13
, PRODUCT_ID_FLAG_14
, PRODUCT_ID_FLAG_15
, PRODUCT_ID_FLAG_16
, PRODUCT_ID_FLAG_17
, PRODUCT_ID_FLAG_18
#                                    , PRODUCT_ID_FLAG_19
#                                    , PRODUCT_ID_FLAG_20
#                                    , PRODUCT_ID_FLAG_39
#                                    , PRODUCT_ID_FLAG_59
#                                    , PRODUCT_ID_FLAG_60
#                                    , PRODUCT_ID_FLAG_61
#                                    , PRODUCT_ID_FLAG_62
#                                    , PRODUCT_ID_FLAG_63
#                                    , PRODUCT_ID_FLAG_64
#                                    , PRODUCT_ID_FLAG_65
, PRODUCT_ID_STATUS_1
, PRODUCT_ID_STATUS_2
, PRODUCT_ID_STATUS_3
, PRODUCT_ID_STATUS_4
, PRODUCT_ID_STATUS_11
, PRODUCT_ID_STATUS_12
#                                    , PRODUCT_ID_STATUS_13
, PRODUCT_ID_STATUS_14
, PRODUCT_ID_STATUS_15
, PRODUCT_ID_STATUS_16
, PRODUCT_ID_STATUS_17
, PRODUCT_ID_STATUS_18
#                                    , PRODUCT_ID_STATUS_19
#                                    , PRODUCT_ID_STATUS_20
#                                    , PRODUCT_ID_STATUS_39
#                                    , PRODUCT_ID_STATUS_60
#                                    , PRODUCT_ID_STATUS_61
#                                    , PRODUCT_ID_STATUS_62
#                                    , PRODUCT_ID_STATUS_63
#                                    , PRODUCT_ID_STATUS_64
#                                    , PRODUCT_ID_STATUS_65
, VEHICLE_FLAG_BOLT_ON
, VEHICLE_FLAG_CAR
, VEHICLE_FLAG_MOTORCYCLE
, VEHICLE_FLAG_NO_CAR
#                                    , VEHICLE_FLAG_SCOOTER
, VEHICLE_FLAG_TAXI
, REGR_STATE_FLAG_ACT
, REGR_STATE_FLAG_NSW
, REGR_STATE_FLAG_NT
, REGR_STATE_FLAG_QLD
, REGR_STATE_FLAG_SA
, REGR_STATE_FLAG_TAS
, REGR_STATE_FLAG_VIC
, REGR_STATE_FLAG_WA
, ANY_CAD_JOBS
, ANY_CAD_CAR_MAKE
, ANY_CAD_CAR_MODEL
, ANY_CAD_CAR_MAKE_MODEL
, NRMA_SEGMENT)]
fac_features <- data.table(char_features, other_facs)
fac_features_conv <- mclapply(fac_features, as.factor, mc.cores = 4)
fac_features_conv_dt <- as.data.table(fac_features_conv)
num_levels <- sapply(fac_features_conv_dt, nlevels)
low_levels <- num_levels[num_levels <= 52]
fac_features_filtered <- fac_features_conv_dt[, rownames(data.frame(low_levels)), with = FALSE]
fac_features <- fac_features_filtered
# Impute missing categorical values with 'MISSING'
fac_features.mat <- as.matrix(fac_features)
fac_features.mat[is.na(fac_features.mat)] <- 'MISSING'
fac_features.mat[fac_features.mat == ''] <- 'MISSING'
fac_features.dt <- data.table(fac_features.mat)
fac_features.dt <- mclapply(fac_features.dt, as.factor, mc.cores = 4)
fac_features.dt <- as.data.table(fac_features.dt)
fac_features.dt
nums <- sapply(features_model, is.numeric)
num_features <- data.frame(features_model)[,nums]
str(num_features, list.len = 999)
num_features <- data.table(num_features)
num_features <- num_features[, list(MEMBERSHIP_TENURE
, ADDITIONAL_YEARS
, TIME_SINCE_CURRENT_STATUS
, TIME_SINCE_YOUTH_EXPR
, AGE
, LATITUDE
, LONGITUDE
, NUM_PRODUCTS
, AVG_CONTRACT_PERIOD
, TIME_SINCE_STATUS_CHG
, TIME_SINCE_CONTRACT_START
, TIME_SINCE_CONTRACT_END
, TIME_SINCE_DATE_PAID_TO
, NUM_VEHICLE_BOLT_ON
, NUM_VEHICLE_CAR
, NUM_VEHICLE_MOTORCYCLE
, NUM_VEHICLE_NO_CAR
#                                     , NUM_VEHICLE_SCOOTER
, NUM_VEHICLE_TAXI
, NUM_REGR_STATE_ACT
, NUM_REGR_STATE_NSW
, NUM_REGR_STATE_NT
, NUM_REGR_STATE_QLD
, NUM_REGR_STATE_SA
, NUM_REGR_STATE_TAS
, NUM_REGR_STATE_VIC
, NUM_REGR_STATE_WA
, CAR_YEAR
, NumCADJobs
, CAD_JOBS_vs_tenure_ratio
, NumProducts_vs_tenure_ratio)]
# Set Inf to NA
for (j in 1:ncol(num_features)) set(num_features, which(is.infinite(num_features[[j]])), j, NA)
# Scale numeric features
preProcValues <- preProcess(num_features, method = c("center", "scale"), verbose = TRUE)
num_features <- predict(preProcValues, num_features)
num_features[is.na(num_features)] <- 0
processed_features <- data.table(fac_features.dt, num_features)
str(processed_features)
processed_features[, `:=` ( MKTG_CONSENT_FLAG = NULL
, ANY_CAD_CAR_MAKE = NULL
, ANY_CAD_CAR_MODEL = NULL
, ANY_CAD_CAR_MAKE_MODEL = NULL
, CURRENT_STATUS = NULL
)]
processed_features[, label]
summary(processed_features[, label])
?randonForest
library(caret)
library(data.table)
library(pROC)
library(randomForest)
library(parallel)
?randonForest
?randomForest
head(processed_features[, -c('label')])
head(processed_features[, -c('label'), with = FALSE])
head(processed_features[, -label, with = FALSE])
head(processed_features[, !'label', with = FALSE])
str(processed_features[, !'label', with = FALSE])
rf_fit <- randomForest(x = processed_features[, !'label', with = FALSE]
, y = processed_features[, label]
#                        , mtry = 5
, ntree = 5)
rf_fit
?randomForest
gc()
install.packages("stringr")
install.packages("caret")
install.packages("data.table")
install.packages("lubridate")
install.packages("pROC")
install.packages("e1071")
install.packages("rpart.plot")
install.packages("manipulate")
library(data.table) set.seed(45L)DT <- data.table(V1=c(1L,2L),                 V2=LETTERS[1:3], V3=round(rnorm(4),4), V4=1:12)
library(data.table)
set.seed(45L)
DT <- data.table(V1=c(1L,2L),
V2=LETTERS[1:3], V3=round(rnorm(4),4), V4=1:12)
DT[3:5,]
DT[ V2 == "A"]
DT[ V2 %in% c("A","C")]
DT[,V2]
DT[,.(V2,V3)]
DT[,sum(V1)]
DT[,.(sum(V1),sd(V3))]
DT[,.(Aggregate = sum(V1),Sd.V3 = sd(V3))]
DT[,.(V1, Sd.V3 = sd(V3))]
DT[,{print(V2)plot(V3)NULL}]
DT[,{print(V2)     plot(V3)     NULL}]
DT[,{print(V2)     , plot(V3)     , NULL}]
DT[,.(V4.Sum = sum(V4)),by=V1]
DT[,.(V4.Sum = sum(V4)),by=.(V1,V2)]
DT[,.(V4.Sum = sum(V4)),by=sign(V1-1)]
DT[,.(V4.Sum = sum(V4)),by=.(V1.01 = sign(V1-1))]
DT[1:5,.(V4.Sum = sum(V4)),by=V1]
DT[,.N,by=V1]
DT[, V1 := round(exp(V1),2)]
DT[, c("V1","V2") := list (round(exp(V1),2), LETTERS [4:6])]
DT[, ':=' (V1 = round(exp(V1),2),V2 = LETTERS[4:6])][]
DT[, V1 := NULL]
DT[, c("V1","V2") := NULL]
Cols.chosen = c("A","B")
DT[, Cols.chosen := NULL]
DT[, (Cols.chosen) := NULL]
setkey(DT,V2)
set.seed(45L)DT <- data.table(V1=c(1L,2L),                 V2=LETTERS[1:3], V3=round(rnorm(4),4), V4=1:12)
set.seed(45L)DT <- data.table(V1=c(1L,2L),                 V2=LETTERS[1:3], V3=round(rnorm(4),4), V4=1:12)
set.seed(45)DT <- data.table(V1=c(1L,2L),                 V2=LETTERS[1:3], V3=round(rnorm(4),4), V4=1:12)
set.seed(45L)
DT <- data.table(V1=c(1L,2L),V2=LETTERS[1:3], V3=round(rnorm(4),4), V4=1:12)
setkey(DT,V2)
DT["A"]
DT[c("A","C")]
set.seed(45L)
DT <- data.table(V1=c(1L,2L),V2=LETTERS[1:3], V3=round(rnorm(4),4), V4=1:12)
setkey(DT,V2)DT["A"]DT[c("A","C")]
setkey(DT,V2)
DT["A"]
DT[c("A","C")]
DT["A", mult ="first"]
DT["A", mult = "last"]
DT["A"]
DT[c("A","D")]
DT[c("A","D")]
DT[c("A","D"), nomatch=0]
DT[c("A","D")]
DT[c("A","D"), nomatch=0]
DT[c("A","C"),sum(V4)]
DT[c("A","C"),sum(V4)]
DT[c("A","C"),sum(V4), by=.EACHI]
DT[.(2,c("A","C"))]
setkey(DT,V1,V2)
DT[.(2,"C")]
DT[.(2,c("A","C"))]
DT[.N-1]
DT[,.N]
DT[,.(V2,V3)]
DT[, mean(V3), by=.(V1,V2)]
DT[, print(.SD), by=V2]
set.seed(45L)DT <- data.table(V1=c(1L,2L),V2=LETTERS[1:3], V3=round(rnorm(4),4), V4=1:12)
DT[.N-1]
DT[,.N]
DT[,.(V2,V3)]
DT[, mean(V3), by=.(V1,V2)]
DT[, print(.SD), by=V2]
DT[,.SD[c(1,.N)], by=V2]
DT[, lapply(.SD, sum), by=V2]
DT[, lapply(.SD,sum), by=V2,.SDcols = c("V3","V4")]
DT[, lapply(.SD,sum), by=V2,.SDcols = paste0("V",3:4)]
DT <- DT[, .(V4.Sum = sum(V4)), by = V1]
DT[V4.Sum > 40]
DT[, .(V4.Sum = sum(V4)), by = V1][V4.Sum > 40 ]
DT <- DT[, .(V4.Sum = sum(V4)), by = V1]
set.seed(45L)DT <- data.table(V1=c(1L,2L),V2=LETTERS[1:3], V3=round(rnorm(4),4), V4=1:12)
set.seed(45L)
DT <- data.table(V1=c(1L,2L),V2=LETTERS[1:3], V3=round(rnorm(4),4), V4=1:12)
DT[, .(V4.Sum = sum(V4)), by = V1][V4.Sum > 40 ]
DT[, .(V4.Sum = sum(V4)),by=V1][order(-V1)]
for (i in seq_along(rows)){ set(DT,      i=rows[[i]], j = cols[i], value = NA) }
for (i in seq_along(rows))  { set(DT,i=rows[[i]], j = cols[i], value = NA) }
rows = list(3:4,5:6)
cols = 1:2
for (i in seq_along(rows))  { set(DT,i=rows[[i]], j = cols[i], value = NA) }
for (i in seq_along(rows))
{ set(DT,i=rows[[i]], j = cols[i], value = NA) }
for (i in seq_along(rows))
{ set(DT,i=rows[[i]], j = cols[i], value = NA) }
DT
setnames(DT,"V2","Rating")
setnames(DT,c("V2","V3"), Changes two column names. c("V2.rating","V3.DataCamp"))
library("rstan", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("manipulate")
install.packages("RColorBrewer")
install.packages("shiny")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("rattle")
library("rattle", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
rattle()
rattle()
library("rattle", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
rattle()
rattle()
library(rstan)
?stan
library(rstan)
stanmodelcode <- "
data {
int<lower=0> N;
int<lower=0, upper=1> y[N];
}
parameters {
real<lower=0, upper=1> theta;
}
model {
theta ~ beta(1, 1);
for (n in 1:N)
y[n] ~ bernoulli(theta);
}
"
N <- 5
y <- rep(0,5)
dat <- list(N = N, y = y);
fit <- stan(model_code = stanmodelcode,
model_name = "Longley-Cook",
data = dat)
library(rstan)
stanmodelcode <- "
data {
int<lower=0> N;
int<lower=0, upper=1> y[N];
}
parameters {
real<lower=0, upper=1> theta;
}
model {
theta ~ beta(1, 1);
for (n in 1:N)
y[n] ~ bernoulli(theta);
}
"
N <- 5
N <- 5
y <- rep(0,5)
install.packages("shinyStan")
install.packages("Zelig")
install.packages("MCMCpack")
library("Zelig", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("coda")
install.packages("ggmcmc")
install.packages("ggmap")
#=====================================================
# http://www.magesblog.com/2015/05/hello-stan.html
#=====================================================
library(rstan)
stanmodelcode <- "
data {
int<lower=0> N;
int<lower=0, upper=1> y[N];
}
parameters {
real<lower=0, upper=1> theta;
}
model {
theta ~ beta(1, 1);
for (n in 1:N)
y[n] ~ bernoulli(theta);
}
"
N <- 5
y <- rep(0,5)
dat <- list(N = N, y = y);
fit <- stan(model_code = stanmodelcode,
model_name = "Longley-Cook",
data = dat)
fit
traceplot(fit, 'theta')
plot(fit)
theta <- extract(fit, 'theta')
theta <- unlist(theta, use.names=FALSE)
summary(theta)
hist(theta, xlim=c(0,1), freq=FALSE)
curve(dbeta(x, 1, 1),
from=0, to=1,
add=TRUE, col='green', lwd=1.5)
curve(dbeta(x, sum(y)+1, N-sum(y)+1),
from=0, to=1,
add=TRUE, col='blue', lwd=1.5)
legend("topright", lty=1,
legend = c("Prior", "Posterior"),
col=c("green", "blue"), bty="n")
fit
install.packages("googleVis")
library(ggmcmc)
data(radon)
s.radon.short <- radon$s.radon.short
s.radon.short
S <- ggs(s.radon.short)
S
str(S)
class(S)
str(S)
ggmcmc(S)
getwd()
setwd("~/R scripts/output")
ggmcmc(S, file = '~/R scripts/output/ggmc_output.pdf')
install.packages("devtools")
source_url("https://github.com/stan-dev/shinystan/raw/develop/install_shinystan.R")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
source_url("https://github.com/stan-dev/shinystan/raw/develop/install_shinystan.R")
install_shinystan()
library("shinyStan", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?shinyStan
launch_shinystan_demo()
launch_shinystan_demo()
