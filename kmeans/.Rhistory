customers_w[, wk := wk_index]
setnames(customers_w, str_replace_all(names(customers_w), eval(wk_string), ''))
return(customers_w)
}
customers_12w <- split_wks(dataset = customers, wk_string = '_12w', wk_index = 2)
customers_12w
split_wks <- function(dataset, wk_string, wk_index){
customers_w <- customers[, grepl(paste0('.*', wk_string), names(dataset)) | grepl('aka', names(dataset)) | grepl('PC1', names(dataset)) | grepl('PC2', names(dataset)) | grepl(eval(arg.labs), names(dataset)), with = F]
customers_w[, wk := wk_index]
setnames(customers_w, str_replace_all(names(customers_w), eval(wk_string), ''))
return(customers_w)
}
customers_4w <- split_wks(dataset = customers, wk_string = '_4w', wk_index = 0)
customers_8w <- split_wks(dataset = customers, wk_string = '_8w', wk_index = 1)
customers_12w <- split_wks(dataset = customers, wk_string = '_12w', wk_index = 2)
customers_4w
customers_8w
customers_12w
svms <- lapply(arg.labs, function(L) svm( get(L) ~ SG_Business + SG_Entertainment + SG_Finance + SG_Lifestyle + SG_Local + SG_Motoring + SG_News +
SG_Opinion + SG_Sport + SG_SportingPulse + SG_Taste + SG_Technology + SG_Travel + SG_Vogue, data = customers_12w))
customers_12w[, scores_1 := predict(svms[[1]])]
customers_4w[, scores_1 := predict(svms[[1]])]
customers_8w[, scores_1 := predict(svms[[1]])]
customers <- rbindlist(list(customers_4w, customers_8w, customers_12w))
nrow(customers)
ggplot(data = customers, aes(x = PC1, y = PC2)) + geom_point() + facet_wrap(~ wk)
brks_scores <- with(customers, quantile(scores_1, probs = seq(0, 1, 0.2)))
customers[, QT_scores := cut(scores_1, breaks = brks_scores, labels = 5:1, include.lowest = TRUE)]
customers.long.sections <- customers[, list(section = names(.SD), proportion = unlist(.SD)), by = list(aka, wk)
, .SDcols = names(customers)[grepl("^SG_", names(customers))] ]
customers.long.sections[, proportion := proportion / sum(proportion), by = list(aka, wk)]
customers.pca <- customers[, list(aka, PC1, PC2, scores_1, QT_scores, wk)]
setkeyv(customers.pca, c('aka', 'wk'))
setkeyv(customers.long.sections, c('aka', 'wk'))
customers.long.sections.pca <- customers.pca[customers.long.sections, allow.cartesian = TRUE]
customers.pca[aka == '1dfe231c-abae-4494-81f9-3a4f9a54f19b']
customers.long.sections[aka == '1dfe231c-abae-4494-81f9-3a4f9a54f19b' & section == 'SG_Business']
customers.long.sections.pca[aka == '1dfe231c-abae-4494-81f9-3a4f9a54f19b' & section == 'SG_Business']
c("SG_Other"         = "grey90"
, "SG_SportingPulse" = "darkgreen"
, "SG_Sport"         = "forestgreen"
, "SG_Opinion"       = "blueviolet"
, "SG_Local"         = "brown2"
, "SG_News"          = "burlywood"
, "SG_Technology"    = "cyan1"
, "SG_Travel"        = "yellow"
, "SG_Taste"         = "maroon4"
, "SG_Lifestyle"     = "maroon2"
, "SG_Vogue"         = "orangered4"
, "SG_Finance"       = "royalblue2"
, "SG_Business"      = "steelblue3"
, "SG_Entertainment" = "palegreen"
, "SG_Motoring"      = "orange1"
) -> section_scheme
cust_agg <- customers.long.sections.pca[, .N, by = aka]
cust_agg
summary(cust_agg)
cust_agg
cust_agg <- customers.long.sections.pca[, list(numrows = .N), by = aka]
cust_agg
cust_agg[, .N, by = numrows]
cust_agg[, .N, by = numrows]
cust_agg_numrows <- cust_agg[, .N, by = numrows]
cust_agg_numrows
cust_agg_numrows[, max(N)]
cust_agg_numrows[N == max(N)]
cust_agg_numrows[N == max(N), numrows]
cust_agg_numrows <- cust_agg[, .N, by = numrows]
cust_agg_numrows[N == max(N), numrows]
cust_agg_numrows <- cust_agg[, .N, by = numrows]
numrows_mode <- cust_agg_numrows[N == max(N), numrows]
cust_agg[N > numrows_mode, aka]
cust_agg_numrows <- cust_agg[, .N, by = numrows]
numrows_mode <- cust_agg_numrows[N == max(N), numrows]
cust_agg[numrows != numrows_mode, aka]
cust_agg
cust_agg
customers.long.sections.pca <- customers.long.sections.pca[aka %in% cust_agg[N == 42, aka]]
cust_agg[numrows == 42, aka]
customers.long.sections.pca <- customers.long.sections.pca[aka %in% cust_agg[numrows == numrows_mode, aka]]
customers.long.sections.pca
nrow(customers.long.sections.pca)
cust_agg <- customers.long.sections.pca[, list(numrows = .N), by = aka]
cust_agg
cust_agg <- customers.long.sections.pca[, list(numrows = .N), by = aka]
cust_agg_numrows <- cust_agg[, .N, by = numrows]
numrows_mode <- cust_agg_numrows[N == max(N), numrows]
cust_agg[numrows != numrows_mode, aka]
customers.long.sections.pca <- customers.long.sections.pca[aka %in% cust_agg[numrows == numrows_mode, aka]]
nrow(customers.long.sections.pca)
customers.long.sections.pca
cust_agg
cust_agg[numrows == numrows_mode, aka]
cust_agg <- customers.long.sections.pca[, list(numrows = .N), by = aka]
cust_agg_numrows <- cust_agg[, .N, by = numrows]
numrows_mode <- cust_agg_numrows[N == max(N), numrows]
cust_agg[numrows != numrows_mode, aka]
customers.long.sections.pca <- customers.long.sections.pca[aka %in% cust_agg[numrows == numrows_mode, aka]]
nrow(customers.long.sections.pca)
plot_strips <- function(dataset){
p <- ggplot(data = dataset) +
geom_bar(aes(x = aka, y = proportion, fill = section), stat = 'identity') +
scale_fill_manual(values = section_scheme) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
return(p)
}
plot_strips(customers.long.sections.pca[wk == 2][1:1e3])
plot_strips(customers.long.sections.pca[wk == 2 & QT_scores %in% c(1, 5)]) + facet_grid(wk ~ QT_scores)
customers.long.sections.pca[, max(PC1)]
list_1 <- seq(0, numcells) * customers.long.sections.pca[, max(PC1) - min(PC1)] / numcells + customers.long.sections.pca[, min(PC1)]
list_2 <- seq(0, numcells) * customers.long.sections.pca[, max(PC2) - min(PC2)] / numcells + customers.long.sections.pca[, min(PC2)]
list_1 <- round(list_1, digits = 8)
list_2 <- round(list_2, digits = 8)
customers.long.sections.pca[, QT1 := cut(round(PC1, digits = 8), breaks = list_1, labels = numcells:1, include.lowest = TRUE)]
customers.long.sections.pca
customers.long.sections.pca[, QT1 := cut(round(PC1, digits = 8), breaks = list_1, labels = numcells:1, include.lowest = TRUE)]
customers.long.sections.pca[, QT2 := cut(round(PC2, digits = 8), breaks = list_2, labels = numcells:1, include.lowest = TRUE)]
customers.long.sections.pca[, .N, by = list(QT1, QT2)]
customers.long.sections.pca[, QT_PC_ID := paste0(QT1, QT2)]
customers.long.sections.pca[, .N, by = QT_PC_ID]
cust_u <- unique(customers.long.sections.pca[wk == 2], by = 'aka')
cust_u_agg <- cust_u[, .N, by = QT_PC_ID]
cells_gt_3 <- cust_u_agg[N >= 3, QT_PC_ID]
cells_lt_3 <- cust_u_agg[N < 3, QT_PC_ID]
cust_u_cells_gt_3 <- cust_u[QT_PC_ID %in% cells_gt_3]
cust_u_cells_lt_3 <- cust_u[QT_PC_ID %in% cells_lt_3]
set.seed(456)
cust_samp_cells_gt_3 <- cust_u_cells_gt_3[, sample(aka, size = 3), by = QT_PC_ID]
setnames(cust_samp_cells_gt_3, c('QT_PC_ID', 'aka'))
cust_samp_cells_gt_3[, .N, by = QT_PC_ID]
cust_samp_cells_gt_3[, bin_rank := seq_len(.N) - 1, by = QT_PC_ID]
cust_u_cells_lt_3[, bin_rank := seq_len(.N) - 1, by = QT_PC_ID]
setkey(customers.long.sections.pca, aka)
setkey(cust_samp_cells_gt_3, aka)
setkey(cust_u_cells_lt_3, aka)
cust_sample_gt_3 <- customers.long.sections.pca[cust_samp_cells_gt_3[, list(aka, bin_rank)]]
cust_sample_lt_3 <- customers.long.sections.pca[cust_u_cells_lt_3[, list(aka, bin_rank)]]
cust_sample <- rbindlist(list(cust_sample_gt_3, cust_sample_lt_3))
cust_sample[, .N, by = QT_PC_ID]
summary(cust_sample)
cust_sample[is.na(proportion), proportion := 0]
sec_elem <- cust_sample[, list(PC1 = PC1, PC2 = PC2, section = section
, QT1 = QT1, QT2 = QT2
, xmin = wk, xmax = wk + 0.8
, ymin = 1.2 * bin_rank + cumsum(proportion) - proportion
, ymax = 1.2 * bin_rank + cumsum(proportion)), by = list(bin_rank, wk, QT1, QT2)]
single_cust_elem <- cust_sample[QT_PC_ID == '35'
, list(PC1 = PC1, PC2 = PC2, section = section, xmin = wk, xmax = wk + 0.8
, ymin = 1 * bin_rank + cumsum(proportion) - proportion
, ymax = 1 * bin_rank + cumsum(proportion))
, by = list(bin_rank, wk)]
ggplot(data = sec_elem) +
#   geom_subplot2d(aes(x = PC1, y = PC2, subplot = geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = section)))
#                  , breaks = list(list_1, list_2), ref = ref_box(color = 'black', fill = 'white')) +
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = section)) + facet_grid(QT1 ~ QT2) +
scale_fill_manual(values = section_scheme) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()
, axis.text.x = element_blank(), axis.text.y = element_blank()
, axis.title.x = element_blank(), axis.title.y = element_blank()
, axis.ticks.x = element_blank(), axis.ticks.y = element_blank()
#         , legend.position = 'None'
, strip.background = element_blank(), strip.text = element_blank())
ggplot(data = single_cust_elem) +
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = section)) +
scale_fill_manual(values = section_scheme) +
theme_minimal() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()
, axis.text.x = element_blank(), axis.text.y = element_blank()
, axis.title.x = element_blank(), axis.title.y = element_blank()
, axis.ticks.x = element_blank(), axis.ticks.y = element_blank()
, legend.position = 'None')
single_cust_elem <- cust_sample[QT_PC_ID == '35'
, list(PC1 = PC1, PC2 = PC2, section = section, xmin = wk, xmax = wk + 0.8
, ymin = 1.2 * bin_rank + cumsum(proportion) - proportion
, ymax = 1.2 * bin_rank + cumsum(proportion))
, by = list(bin_rank, wk)]
ggplot(data = single_cust_elem) +
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = section)) +
scale_fill_manual(values = section_scheme) +
theme_minimal() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()
, axis.text.x = element_blank(), axis.text.y = element_blank()
, axis.title.x = element_blank(), axis.title.y = element_blank()
, axis.ticks.x = element_blank(), axis.ticks.y = element_blank()
, legend.position = 'None')
ggplot(data = sec_elem) +
#   geom_subplot2d(aes(x = PC1, y = PC2, subplot = geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = section)))
#                  , breaks = list(list_1, list_2), ref = ref_box(color = 'black', fill = 'white')) +
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = section)) + facet_grid(QT1 ~ QT2) +
scale_fill_manual(values = section_scheme) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()
, axis.text.x = element_blank(), axis.text.y = element_blank()
, axis.title.x = element_blank(), axis.title.y = element_blank()
, axis.ticks.x = element_blank(), axis.ticks.y = element_blank()
#         , legend.position = 'None'
, strip.background = element_blank(), strip.text = element_blank())
cust_sample
sec_elem <- cust_sample[, list(PC1 = PC1, PC2 = PC2, section = section
, QT1 = QT1, QT2 = QT2, QT_scores = QT_scores
, xmin = wk, xmax = wk + 0.8
, ymin = 1.2 * bin_rank + cumsum(proportion) - proportion
, ymax = 1.2 * bin_rank + cumsum(proportion)), by = list(bin_rank, wk, QT1, QT2)]
ggplot(data = sec_elem) +
#   geom_subplot2d(aes(x = PC1, y = PC2, subplot = geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = section)))
#                  , breaks = list(list_1, list_2), ref = ref_box(color = 'black', fill = 'white')) +
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = section)) + facet_grid(QT1 ~ QT2) +
scale_fill_manual(values = section_scheme) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()
, axis.text.x = element_blank(), axis.text.y = element_blank()
, axis.title.x = element_blank(), axis.title.y = element_blank()
, axis.ticks.x = element_blank(), axis.ticks.y = element_blank()
#         , legend.position = 'None'
, strip.background = element_blank(), strip.text = element_blank())
plot_pca <- function(dataset){
p <- ggplot(data = dataset) +
#   geom_subplot2d(aes(x = PC1, y = PC2, subplot = geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = section)))
#                  , breaks = list(list_1, list_2), ref = ref_box(color = 'black', fill = 'white')) +
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = section)) + facet_grid(QT1 ~ QT2) +
scale_fill_manual(values = section_scheme) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()
, axis.text.x = element_blank(), axis.text.y = element_blank()
, axis.title.x = element_blank(), axis.title.y = element_blank()
, axis.ticks.x = element_blank(), axis.ticks.y = element_blank()
#         , legend.position = 'None'
, strip.background = element_blank(), strip.text = element_blank())
return(p)
}
plot_pca(sec_elem)
plot_pca(sec_elem[QT_scores == 1])
plot_pca(sec_elem[QT_scores == 5])
cust_sample[is.na(proportion), proportion := 0]
sec_elem <- cust_sample[, list(PC1 = PC1, PC2 = PC2, section = section
, QT1 = QT1, QT2 = QT2, QT_scores = QT_scores
, xmin = wk, xmax = wk + 0.9
, ymin = 1.1 * bin_rank + cumsum(proportion) - proportion
, ymax = 1.1 * bin_rank + cumsum(proportion)), by = list(bin_rank, wk, QT1, QT2)]
plot_pca <- function(dataset){
p <- ggplot(data = dataset) +
#   geom_subplot2d(aes(x = PC1, y = PC2, subplot = geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = section)))
#                  , breaks = list(list_1, list_2), ref = ref_box(color = 'black', fill = 'white')) +
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = section)) + facet_grid(QT1 ~ QT2) +
scale_fill_manual(values = section_scheme) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()
, axis.text.x = element_blank(), axis.text.y = element_blank()
, axis.title.x = element_blank(), axis.title.y = element_blank()
, axis.ticks.x = element_blank(), axis.ticks.y = element_blank()
#         , legend.position = 'None'
, strip.background = element_blank(), strip.text = element_blank())
return(p)
}
plot_pca(sec_elem)
plot_pca(sec_elem[QT_scores == 1])
plot_pca(sec_elem[QT_scores == 5])
get_random_subset <- function(dataset){
cust_u <- unique(customers.long.sections.pca[wk == 2], by = 'aka')
cust_u_agg <- cust_u[, .N, by = QT_PC_ID]
cells_gt_3 <- cust_u_agg[N >= 3, QT_PC_ID]
cells_lt_3 <- cust_u_agg[N < 3, QT_PC_ID]
cust_u_cells_gt_3 <- cust_u[QT_PC_ID %in% cells_gt_3]
cust_u_cells_lt_3 <- cust_u[QT_PC_ID %in% cells_lt_3]
set.seed(456)
cust_samp_cells_gt_3 <- cust_u_cells_gt_3[, sample(aka, size = 3), by = QT_PC_ID]
setnames(cust_samp_cells_gt_3, c('QT_PC_ID', 'aka'))
cust_samp_cells_gt_3[, .N, by = QT_PC_ID]
cust_samp_cells_gt_3[, bin_rank := seq_len(.N) - 1, by = QT_PC_ID]
cust_u_cells_lt_3[, bin_rank := seq_len(.N) - 1, by = QT_PC_ID]
setkey(customers.long.sections.pca, aka)
setkey(cust_samp_cells_gt_3, aka)
setkey(cust_u_cells_lt_3, aka)
cust_sample_gt_3 <- customers.long.sections.pca[cust_samp_cells_gt_3[, list(aka, bin_rank)]]
cust_sample_lt_3 <- customers.long.sections.pca[cust_u_cells_lt_3[, list(aka, bin_rank)]]
cust_sample <- rbindlist(list(cust_sample_gt_3, cust_sample_lt_3))
return(cust_sample)
}
cust_sample <- get_random_subset(customers.long.sections.pca[wk == 2])
cust_sample[, .N, by = QT_PC_ID]
get_random_subset <- function(dataset){
cust_u <- unique(dataset, by = 'aka')
cust_u_agg <- cust_u[, .N, by = QT_PC_ID]
cells_gt_3 <- cust_u_agg[N >= 3, QT_PC_ID]
cells_lt_3 <- cust_u_agg[N < 3, QT_PC_ID]
cust_u_cells_gt_3 <- cust_u[QT_PC_ID %in% cells_gt_3]
cust_u_cells_lt_3 <- cust_u[QT_PC_ID %in% cells_lt_3]
set.seed(456)
cust_samp_cells_gt_3 <- cust_u_cells_gt_3[, sample(aka, size = 3), by = QT_PC_ID]
setnames(cust_samp_cells_gt_3, c('QT_PC_ID', 'aka'))
cust_samp_cells_gt_3[, .N, by = QT_PC_ID]
cust_samp_cells_gt_3[, bin_rank := seq_len(.N) - 1, by = QT_PC_ID]
cust_u_cells_lt_3[, bin_rank := seq_len(.N) - 1, by = QT_PC_ID]
setkey(customers.long.sections.pca, aka)
setkey(cust_samp_cells_gt_3, aka)
setkey(cust_u_cells_lt_3, aka)
cust_sample_gt_3 <- customers.long.sections.pca[cust_samp_cells_gt_3[, list(aka, bin_rank)]]
cust_sample_lt_3 <- customers.long.sections.pca[cust_u_cells_lt_3[, list(aka, bin_rank)]]
cust_sample <- rbindlist(list(cust_sample_gt_3, cust_sample_lt_3))
return(cust_sample)
}
cust_sample <- get_random_subset(customers.long.sections.pca[wk == 2])
cust_sample[, .N, by = QT_PC_ID]
cust_sample_high <- get_random_subset(customers.long.sections.pca[QT_scores == 1, wk == 2])
cust_sample_high <- get_random_subset(customers.long.sections.pca[QT_scores == 1, wk == 2])
customers.long.sections.pca
customers.long.sections.pca[QT_scores == 1, wk == 2]
customers.long.sections.pca[QT_scores == 1, wk == 2]
cust_sample_high <- get_random_subset(customers.long.sections.pca[QT_scores == 1 & wk == 2])
cust_sample_high[, .N, by = QT_PC_ID]
cust_sample_high[is.na(proportion), proportion := 0]
sec_elem_high <- cust_sample_high[, list(PC1 = PC1, PC2 = PC2, section = section
, QT1 = QT1, QT2 = QT2, QT_scores = QT_scores
, xmin = wk, xmax = wk + 0.9
, ymin = 1.1 * bin_rank + cumsum(proportion) - proportion
, ymax = 1.1 * bin_rank + cumsum(proportion)), by = list(bin_rank, wk, QT1, QT2)]
plot_pca(sec_elem_high)
install.packages("CausalImpact")
install.packages("devtools")
devtools::install_github("google/CausalImpact")
library(CausalImpact)
set.seed(1)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
y[71:100] <- y[71:100] + 10
data <- cbind(y, x1)
data
dim(data)
head(data)
matplot(data, type = "l")
pre.period <- c(1, 70)
post.period <- c(71, 100)
impact <- CausalImpact(data, pre.period, post.period)
plot(impact)
time.points <- seq.Date(as.Date("2014-01-01"), by = 1, length.out = 100)
data <- zoo(cbind(y, x1), time.points)
head(data)
pre.period <- as.Date(c("2014-01-01", "2014-03-11"))
post.period <- as.Date(c("2014-03-12", "2014-04-10"))
impact <- CausalImpact(data, pre.period, post.period)
plot(impact)
summary(impact)
summary(impact, "report")
summary(impact, "report")
impact$summary
impact <- CausalImpact(..., model.args = list(niter = 5000, nseasons = 7))
library(CausalImpact)
install.packages("devtools")
library(devtools)
devtools::install_github("google/CausalImpact")
library(CausalImpact)
library(devtools)
devtools::install_github("google/CausalImpact")
library(CausalImpact)
set.seed(1)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = 100)
y <- 1.2 * x1 + rnorm(100)
y[71:100] <- y[71:100] + 10
data <- cbind(y, x1)
dim(data)
head(data)
matplot(data, type = "l")
pre.period <- c(1, 70)
post.period <- c(71, 100)
impact <- CausalImpact(data, pre.period, post.period)
plot(impact)
install_github('jburkhardt/RAdwords')
library(RAdwords)
google_auth <- doAuth()
install.packages("caret")
install.packages("ggplot2")
install.packages(c("scales", "data.table"))
install.packages(c("boot", "chron", "class", "cluster", "codetools", "crayon", "dygraphs", "e1071", "foreign", "geosphere", "googleVis", "htmlwidgets", "httr", "KernSmooth", "lattice", "lme4", "manipulate", "mapproj", "maps", "MASS", "Matrix", "nlme", "nnet", "rattle", "RcppEigen", "rmarkdown", "rpart", "rstan", "rversions", "shiny", "sp", "spatial", "survival", "XML"))
library(RAdwords)
doAuth
doAuth()
library(RAdwords)
google_auth <- doAuth()
install.packages(c("mgcv", "Rcpp"))
install.packages("LiblineaR")
install.packages("devtools")
library(devtools)
devtools::install_github('dmlc/xgboost', subdir='R-package')
library(xgboost)
?xgboost
install.packages("mRMRe")
dir.create(Sys.getenv("R_LIBS_USER"), showWarnings = FALSE, recursive = TRUE)
print(R.Version())
chooseCRANmirror(graphics=F, ind=5)
installit <- function(name) {
if(!require(name, character.only=T, quietly=T)) {
install.packages(name,
lib=Sys.getenv("R_LIBS_USER"),
repos='http://cran.csiro.au/',
dependencies = TRUE)
require(name, character.only=T)
}
}
installit("inline")
installit("BH")
installit("Rcpp")
installit("RcppEigen")
installit("plyr")
installit("data.table")
installit("knitr")
installit("devtools")
installit("SVMMaj")
installit("partykit")
installit("gbm")
installit("pROC")
installit("ROCR")
installit("caret")
installit("Matrix")
installit("Ckmeans.1d.dp")
#installit("curl")
#installit("V8") #Needs v8-devel or libv8-dev
#installit("DiagrammeR")
installit("entropy")
installit("LiblineaR")
installit("mRMRe")
if(!require(rstan)) {
Sys.setenv(MAKEFLAGS = "-j1")
on.exit(Sys.unsetenv("R_MAKEVARS_USER"))
on.exit(Sys.unsetenv("R_MAKEVARS_SITE"), add = TRUE)
Sys.setenv(R_MAKEVARS_USER = "foobar")
Sys.setenv(R_MAKEVARS_SITE = "foobar")
library(inline)
library(Rcpp)
src <- " \n    std::vector<std::string> s; \n    s.push_back(\"hello\");\n    s.push_back(\"world\");\n    return Rcpp::wrap(s);\n  "
hellofun <- cxxfunction(body = src, includes = "", plugin = "Rcpp",
verbose = FALSE)
test <- try(hellofun())
if (inherits(test, "try-error"))
stop("hello world failed; ask for help on Rcpp list")
options(repos = c(getOption("repos"), rstan = "http://rstan.org/repo/"))
install.packages("rstan", lib=Sys.getenv("R_LIBS_USER"), type = "source")
print(.libPaths())
library(rstan)
set_cppo("fast")
if (any(grepl("^darwin", R.version$os, ignore.case = TRUE))) {
cat("\nCC=clang", "CXX=clang++ -arch x86_64 -ftemplate-depth-256",
file = "~/.R/Makevars", sep = "\n", append = TRUE)
}
}
if(!require(ggfortify)) {
install_github('sinhrks/ggfortify')
}
if(!require(xgboost)) {
install_github('dmlc/xgboost', subdir='R-package')
}
install.packages("RAdwords", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(RAdwords)
google_auth <- doAuth()
google_auth <- doAuth()
body <- statement(select=c('Clicks','AveragePosition','Cost','Ctr'), report="ACCOUNT_PERFORMANCE_REPORT", start="20140320", end="20140321")
data <- getData(clientCustomerId='699-466-9416', google_auth=google_auth ,statement=body)
google_auth <- doAuth()
rm(google_auth)
google_auth <- doAuth()
body <- statement(select = c('Clicks','AveragePosition','Cost','Ctr')
, report = "ACCOUNT_PERFORMANCE_REPORT", start = "20150701", end = "20150731")
data <- getData(clientCustomerId = '699-466-9416', google_auth = google_auth, statement = body)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
devtools::install_github('dmlc/xgboost', subdir='R-package')
library("xgboost", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?xgboost
install.packages(c("kernlab", "partykit", "pmml", "RUnit"))
install.packages(c("base64enc", "Cairo", "car", "curl", "e1071", "ggmcmc", "httpuv", "mapproj", "maps", "RAdwords", "rJava", "shiny", "xgboost"), lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages(c("evaluate", "git2r"), lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages(c("coin", "partykit"))
install.packages("coin")
install.packages("coin")
install.packages("knitr", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("quantreg", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("SparseM", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("quantreg", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("coin")
install.packages("coin")
install.packages("coin")
install.packages("quantreg", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(cluster)
library(psych)
install.packages("psych", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(cluster)
library(psych)
setwd("~/R scripts/kmeans-example")
data1 <- read.table(file='kmeans_data.csv', sep=',', header=T, row.names=1)
data.p <- as.matrix(data1)
choose.per <- function(){readline("Covert data to percents? 1=yes, 2=no : ")}
per <- as.integer(choose.per())
per <- as.integer(choose.per())
# If user selects yes, convert data from counts to percents
if (per == 1) {
data.p <- prop.table(data.p,1)*100}
data1 <- read.table(file='kmeans_data.csv', sep=',', header=T, row.names=1)
data.p <- as.matrix(data1)
View(data1)
View(data.p)
choose.per <- function(){readline("Covert data to percents? 1=yes, 2=no : ")}
per <- as.integer(choose.per())
# If user selects yes, convert data from counts to percents
if (per == 1) {
data.p <- prop.table(data.p,1)*100}
# Ask for user input - Z-score standardize data?
choose.stand <- function(){readline("Z-score standardize data? 1=yes, 2=no : ")}
stand <- as.integer(choose.stand())
# If user selects yes, Z-score standardize data
kdata <- na.omit(data.p)
if (stand == 1) {
kdata <- scale(kdata)}
source('kmeans.R')
